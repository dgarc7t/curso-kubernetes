URLs para practicar con Kubernetes

https://www.katacoda.com/
https://labs.play-with-k8s.com/

*************************************************************
completar comandos kubectl

kubectl completion bash (sale la configuracion del bash)

echo "source <(kubectl completion bash)"  >> ~/.bashrc

*************************************************************
Crear POD de forma Imperativa
***********************************************************

kubectl run name-pod --image=nginx

kubectl run --generator=run-pod/v1 name-pod --image=nginx
************************************************************

Ver informacion de los PODs
************************************************************

kubectl get pod name-pod -o wide

kubectl describe pod name-pod

kubectl get pod name-pod -o yaml (ver el ficheo yaml de un pod)

kubectl logs name-pod (Ver los logs de un POD)

****************************************************************
Enviar comandos a un POD
****************************************************************

kubectl exec name-pod ls
kubectl exec name-pod bash (Conectarse a un POD)

*****************************************************************

Ver etiquetas de los PODS

kubectl get pod nginx --show-labels

kubectl get pods --show-labels -L name-etiqueta (Coloca Una columna con el nombre de la etiqueta)

kubectl get pods --show-labels -l name-etiqueta=Valor-etiqueta (busca los objetos que cumplan con el valor de la etiqueta)

******************************************************************
******************************************************************
******************************************************************
******************************************************************
******************************************************************
******************************************************************


Deployments (La mejor manera de crearlos es en forma delcartiva por medio de los archivos yaml)

Ver informacion de los Deployments
************************************************************

kubectl get deploy name-deployment -o wide

kubectl describe deploy name-deployment

kubectl get deploy name-deployment -o yaml (ver el ficheo yaml de un deployment)

*************************************************************

Ver etiquetas de los deployments

kubectl get deploy name-deployment --show-labels

*************************************************************

Ver los replicas set

kubectl get rs

**************************************************************

Comando EDIT (Se usa para editar archivos yaml, con este comando no es necesario aplicar cambios, lo hace automatico)

 kubectl edit deploy name-deployment

*************************************************************
Escalar un deployment (numero de replicas puede ser ascendente o descendente)


kubectl scale deploy name-deployment --replicas=2


kubectl scale deploy -l v=1 --replicas=3 (Este comando escala el deployment que conincida con la etqieta v=1)

***********************************************************

Chequeas los recursos de cluster de kubernetes

kubectl describe node


kubectl top node (se deben instalar las metricas)

kubectl top pods


************************************************************

Aplicar varios fiecheros (para desplegar todos los ficheros dentro de un POD)

kubectl apply -f name-directory/

************************************************************

Metrics-server


***********************************************************

Comprobar el uso de memoria y CPU con describe

kubectl describe node

*******************************************************

Servicios

Tipos de Servicios

.- Cluster IP (Tienen acceso solo desde el cluster se utilizan parta backend)

.- NodePort (Se usa para exponer el pod desde afuera)

.- Load balancer ( Igual al node port pero implementa productos de terceros)


**************************************************************************
Crear servicio en forma imperativa:


kubectl expose deploy name-deploy --name=web-svc --target-port=80 --type=NodePort

**************************************************************************
Ver servicios activos

kubectl get svc

 kubectl expose deploy myapache --name=web-svc --target-port=80 --type=NodePort

*************************************************************************

kubectl describe svc name-svc

*******************************************************************************

Modificar aplicacion (aplica cuando se cambiar caracteristicas en los contenedores por ejemplo la imagen)

con la estrategia RollingUpdate no hay interrupcion de servicio, baja los pod uno por uno mientras hace el update

kubectl rollout histoty deploy name-deploy (muestra las revisiones, es l historial de actualizaciones)

kubectl rollout histoty deploy name-deploy --revision=1 (muestra la revision especificada)


kubectl rollout status deploy name-deploy (Muestra lo que esta haciendo actualmente el update)

*******************************************************************************

Modificar aplicacion

Rolling Back

kubectl rollout undo deploy name-deploy --to-revision=2 (Vuelve a como estaba en la revision 2, y coloca una nueva revision)


**********************************************************************************

Modificar la applicacion

Estrategia Recreate (con esta estrategia hay interrupcion de servicio, ya que elimina todos los pods y los crea nuevamente)

	
*********************************************************************************

Variables de entorno del servicio en los pods


Cuando se crea un servicio, en los pods se crean variables de entorno, se puedene ver ingreando al pod

y colocando el comando env

**********************************************************************************
*********************************************************************************
*********************************************************************************
NameSpace
**********************************************************************************
*********************************************************************************
*********************************************************************************
los namespace se usan para dividir los objetos o el entorno de trabajo.
Son una dicision logica
El namespace por defecto es el default y todos los objetos se crean alli si no se especifica un namespace
******************************************************************************

ver los namespace disponibles

kubectl get namespace
kubectl get ns

**********************************************************************
Ver un namespace en particular

kubectl get namespace name-namespace

kubectl describe namespace name-namespace

Ver los pods de un determinado namespace

kubectl get pods -n name-namespace

*******************************************************************

Ver todos los pods de todos los namespaces


kubectl get pods --all-namespaces

**********************************************************************
namespace kube-system

Contiene todos los objetos que se crean durante la instalacion, para el funcionamiento del cluster

**************************************************************************

Crear y borrar namespace

crear namespace de forma imperativa

kubectl create namespace name-namespace

kubectl delete namespace name-namespace

***************************************************************************

Crear namespace de forma declarativa

Ejemplo del archivo yaml:

apiVersion: v1
kind: Namespace
metadata:
  name: dev1
  labels:
     tipo: desarrollo

**************************************************************************

Crear objetos en una namespace

Ejemplo:

kubectl apply -f archivo.yaml --namespace=name-namespace

*************************************************************************

Verificar que este creado

Ejemplo:

kubectl get deploy name-deploy -n name-namespace

kubectl get pods name-pod -n name-namespace

kubectl get rs -n name-namespace

kubectl descibe pod name-pod -n name-namespace


************************************************************************

Establecer un namespace por defecto. (se usa para no poner a cada rato el namespace)

kubectl config view (nos da la configuracion del cluster ver la seccion contexto para ver namespace por defecto)

kubectl config set-context --current --namespace=name-namespace

*********************************************************************************


Limites de recursos en el namespace (aplica los limits a todos los pods que se creen dentro del namespace)

Ejemplo de archivo yaml:

apiVersion: v1
kind: LimitRange
metadata:
  name: recursos
spec:
  limits:
  - default:
      memory: 512Mi
      cpu: 1
    defaultRequest:
      memory: 256Mi
      cpu: 0.5
    max:
      memory: 1Gi
      cpu: 4
    min:
      memory: 128Mi
      cpu: 0.5
    type: Container

**********************************************

Se aplican los limites al namespace

Ejemplo

kubectl apply -f limits.yaml -n name-namespace
**********************************************
**********************************************
**********************************************
**********************************************
Almacenamiento en Kubernetes

PV= Volumen Persistente
PVC= Volumen Persistente Claim
SC= Storage-class  (une los PV con los PVC)

1.- Se crea el PV
2.- Se crea el PVC y se asocia al PV
3.- Se crea el POD y se asocia al PVC

**********************************************

Tipo de volumen HostPath
Es recomedable solo para pruebas ya que se es un directorio local del nodo



*******************************************************

Storage Class (Almacenamiento Dinamico) (se usa con proveedor aws, google, azure) se utilizan las apis o plugins de los proveedores
En este caso los PV se asocian a la storage class

Una storage class puede tener muchos PV asociados y el kubernetes decide cual es el que mejor se adapta segun el pvc creado

1.- Se crea la storage class
2.- Se crea el PV y se asocia a la storage class
3.- Se crea el PVC y se asocia al PV
4.- Se crea el POD y se asocia al PVC


********************************************************

Ver las storage class

kubectl get sc

kubectl describe sc name-storage-class

*******************************************************************
*******************************************************************
*******************************************************************
VARIABLES CONFIGMAPS Y SECRETS

Las variables se configuran dentro del contenedor (Afectan como se ejecuta el contenedor) son variables de entorno

******************************************************************++

CONFIGMAPS
Son mapas de configuraciones Globales, se utilizan para trabajar con variables de entono

crear configmap de forma imperativa


kubectl create configmap name-configmap --from-literal=usuario=name-user --from-literal=password=mipassword

*************************************************************

ver configmaps creados

kubectl get cm

*********************************************************

kubectl describe cm name-configmap

*******************************************************
los configmaps se pueden crear desde un archivo que contenga las variables y el valor (no sirve para variables de entorno)

kubectl create configmap name-configmap --from-file name-archivo 

*******************************************************

Carga de variables con configmaps desde un archivo que contenga las variables y el valor (sirve para variables de entorno)

kubectl create configmap name-configmap --from-env-file name-archivo

*******************************************************

ConfigMaps y Volumenes

********************************************************
Secrets (Es un configmap protegido encriptado) utilizado para passwords

crear secrets

kubectl create secret generic name-secret --from-lireral=pass-root=devuser --from-lireral=pass-usu=kubernetes


ver en formato yaml 

kubectl get secret name-secret -yaml


se puedes utilizar configmap y secrets en el mismo pod o deployment

**************************************************************

Secrets y Ficheros

kubectl create secret generic name-secret --from-file=name-archivo

**************************************************************

Secrects declarativos

*************************************************************

Sondas verificar si nuestros pods funcionan correctamente

Existen tres tipos de sondas


COMANDO

HTTP GET

SOCKET


Las respuestas que puede dar una sonda es

success 
failure
unknown

Tipos de comportamiento de las sondas

liveness  (si el pod no responde se mata el contenedor)
readiness (indica si esta listo para dar servicio)
startup   (indica que el contendor esta arriba y dando servicio)

**************************************************************************

Horizontal pods autoscaler (escalar o disminuir pods horizontalmente automaticamente)

En minikube se debe activar metrics-server

minikube addons enable metrics-server

Para hacer prueba de estres en los pods

se instaa la actualiza y se se instala la aplicacion

stress 

Comando

stress -c 1 (estresar cpu)

stress -c 1 -t 60 (estresar cpu durante 60 segundos)

stress -m 1 (estresa memoria)
*************************************************************************************

Otra opcion para hacer pruebas de stress a un servicio web es correr un pod de busybox y ejcutar un bucle con el comando wget 

kubectl run -it --rm load-generator --image=busybox /bin/sh

Hit enter for command prompt

while true; do wget -q -O- http://php-apache; done

*****************************************************************************

HPA horizontal pods autoescaling
Ejemplo

archivo yaml
*************************************************************************************
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-apache
spec:
  selector:
    matchLabels:
      run: php-apache
  replicas: 1
  template:
    metadata:
      labels:
        run: php-apache
    spec:
      containers:
      - name: php-apache
        image: k8s.gcr.io/hpa-example
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 200m

---

apiVersion: v1
kind: Service
metadata:
  name: php-apache
  labels:
    run: php-apache
spec:
  ports:
  - port: 80
  selector:
    run: php-apache
******************************************************************************************


crear hpa

Ejemplo (50% de CPU de 1 a 5 replicas)

kubectl autoscale deployment name-deploy --cpu-percent=50 --min=1 --max=5

para probar el hpa creamos otro pod y realizamos peticiones para hacer pruebas de estres

kubectl run -it --rm load-generator --image=busybox /bin/sh



*************************************************************************************
Instalar metrics server

https://github.com/kubernetes-sigs/metrics-server




****************************************************************************

Anotaciones (Igual a las labels pero cambia el ambito, no sirve para los selctors)
se usa para los ingress

***************************************************************************

RBAC (Autenticacion en el cluster de Kuberentes)

Autenticacion:

Usuario regulares
service account 


*************************************************************************************

Kuberbetes en AWS














